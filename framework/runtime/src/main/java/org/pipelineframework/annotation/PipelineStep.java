/*
 * Copyright (c) 2023-2025 Mariano Barcia
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.pipelineframework.annotation;


import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * Annotation to mark a class as a pipeline step (both client and server).
 * This annotation enables automatic generation of gRPC and REST adapters.
 */
@SuppressWarnings("unused")
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
public @interface PipelineStep {
    /**
     * The order of this step in the pipeline.
     * @return the order of the step
     */
    int order() default 0;

    Class<?> inputType() default Void.class;

    Class<?> outputType() default Void.class;

    /**
     * The gRPC input type for this pipeline step. This is used for gRPC client generation.
     * @return the gRPC input type
     */
    Class<?> inputGrpcType() default Void.class;

    /**
     * The gRPC output type for this pipeline step. This is used for gRPC client generation.
     * @return the gRPC output type
     */
    Class<?> outputGrpcType() default Void.class;

    /**
     * The gRPC grpcStub class for this pipeline step.
     * It is the client generated by grpc.
     * @return the gRPC grpcStub class
     */
    Class<?> grpcStub() default Void.class;

    /**
     * The gRPC implementation class for this backend service.
     * It is the endpoint class generated by grpc.
     * @return the gRPC grpcStub class
     */
    Class<?> grpcImpl() default Void.class;

    /**
     * The inbound mapper class for this pipeline service/step.
     * @return the inbound mapper class
     */
    Class<?> inboundMapper() default Void.class;
    
    /**
     * The outbound mapper class for this pipeline service/step.
     * @return the outbound mapper class
     */
    Class<?> outboundMapper() default Void.class;
    
    /**
     * The step type class for this pipeline step. This can be any of the following
     * <p>
     * StepOneToOne
     * StepOneToMany
     * StepManyToOne
     * StepManyToMany
     * StepSideEffect
     * StepOneToOneBlocking
     * StepOneToManyBlocking
     * StepManyToOneBlocking
     * StepManyToManyBlocking
     * StepOneToOneCompletableFuture
     *
     * @return the step type class
     */
    Class<?> stepType() default Void.class;
    
    /**
     * The backend adapter type class for this pipeline step.
     * <p>
     * This can be any of the following:
     * GrpcReactiveServiceAdapter
     * GrpcReactiveServiceStreamingAdapter
     * GrpcReactiveServiceClientStreamingAdapter
     *
     * @return the backend adapter type class
     */
    Class<?> backendType() default Void.class;
    
    /**
     * The gRPC client name for this pipeline step.
     * @return the gRPC client name
     */
    String grpcClient() default "";

    /**
     * Whether to enable auto-persistence for this step.
     * @return true if auto-persistence should be enabled, false otherwise
     */
    boolean autoPersist() default false;

    /**
     * Whether to enable debug mode for this step.
     * @return true if debug mode should be enabled, false otherwise
     */
    boolean debug() default false;

    /**
     * Whether to enable failure recovery for this step.
     * @return true if failure recovery should be enabled, false otherwise
     */
    boolean recoverOnFailure() default false;

    /**
     * Whether to enable gRPC adapter generation for this step.
     * @return true if gRPC adapter should be generated, false otherwise
     */
    boolean grpcEnabled() default true;

    /**
     * Whether to enable REST adapter generation for this step (default=false)
     * @return true if REST adapter should be generated, false otherwise
     */
    boolean restEnabled() default false;

    /**
     * The backpressure buffer capacity for this step (default=1024)
     * @return the buffer capacity for backpressure handling
     */
    int backpressureBufferCapacity() default 1024;

    /**
     * The backpressure strategy for this step (default="BUFFER")
     * Valid values: "BUFFER", "DROP"
     * Note: "ERROR" strategy is not available in Mutiny 2.9.4. By default, 
     * Mutiny will signal an error when overflow occurs if no other overflow strategy is specified.
     * @return the backpressure strategy for this step
     */
    String backpressureStrategy() default "BUFFER";

    /**
     * The gRPC service base class for this pipeline step.
     * Used to extend the proper gRPC service base class.
     * @return the gRPC service base class
     */
    Class<?> grpcServiceBaseClass() default Void.class;

    /**
     * Whether this step is local to the runner (default=false)
     * When true, no gRPC client is generated and the service is called directly
     * @return true if the step is local, false if it requires a gRPC client
     */
    boolean local() default false;

    /**
     * The batch size for collecting inputs before processing (default=10)
     * Set to a very large number to effectively disable batching
     * @return the batch size for this step
     */
    int batchSize() default 10;

    /**
     * The time window in milliseconds to wait before processing a batch,
     * even if the batch size hasn't been reached (default=1000ms)
     * @return the time window in milliseconds for this step
     */
    long batchTimeoutMs() default 1000L;

    /**
     * Whether to enable parallel processing for this step (default=false)
     * When true, enables concurrent processing of multiple items within the same stream.
     * @return true if parallel processing should be enabled, false otherwise
     */
    boolean parallel() default false;
}