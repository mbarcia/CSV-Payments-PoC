/*
 * Copyright (c) 2023-2025 Mariano Barcia
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import{_ as e,c as s,o as i,a2 as n}from"./chunks/framework.BoyqnxIq.js";const c=JSON.parse('{"title":"Pipeline Framework","description":"","frontmatter":{},"headers":[],"relativePath":"index.md","filePath":"index.md"}'),t={name:"index.md"};function p(r,a,l,o,h,d){return i(),s("div",null,[...a[0]||(a[0]=[n(`<h1 id="pipeline-framework" tabindex="-1">Pipeline Framework <a class="header-anchor" href="#pipeline-framework" aria-label="Permalink to &quot;Pipeline Framework&quot;">​</a></h1><p>A framework for building reactive pipeline processing systems.</p><blockquote><p><strong>Current Version:</strong> v0.9.0 | <a href="/versions.html">View all versions</a></p></blockquote><h2 id="annotation-based-automatic-adapter-generation" tabindex="-1">Annotation-Based Automatic Adapter Generation <a class="header-anchor" href="#annotation-based-automatic-adapter-generation" aria-label="Permalink to &quot;Annotation-Based Automatic Adapter Generation&quot;">​</a></h2><p>This framework now supports annotation-based automatic generation of gRPC and REST adapters, which simplifies the development of pipeline steps by eliminating the disconnect between step configuration and adapter configuration.</p><h3 id="new-annotations" tabindex="-1">New Annotations <a class="header-anchor" href="#new-annotations" aria-label="Permalink to &quot;New Annotations&quot;">​</a></h3><h4 id="pipelinestep" tabindex="-1">@PipelineStep <a class="header-anchor" href="#pipelinestep" aria-label="Permalink to &quot;@PipelineStep&quot;">​</a></h4><p>The <code>@PipelineStep</code> annotation is used to mark a class as a pipeline step. This annotation enables automatic generation of gRPC and REST adapters.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PipelineStep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   order</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   autoPersist</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   debug</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   recoverOnFailure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   stub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyGrpc.MyStub.class,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   inboundMapper</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FooRequestToDomainMapper.class,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   outboundMapper</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DomainToBarResponseMapper.class</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="mapperforstep" tabindex="-1">@MapperForStep <a class="header-anchor" href="#mapperforstep" aria-label="Permalink to &quot;@MapperForStep&quot;">​</a></h4><p>The <code>@MapperForStep</code> annotation is used to mark mapper classes that handle conversions between different representations of the same entity: domain, DTO, and gRPC formats.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MapperForStep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    order</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    grpcType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PaymentsProcessingSvc.AckPaymentSent.class,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    domainType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AckPaymentSent.class</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="benefits" tabindex="-1">Benefits <a class="header-anchor" href="#benefits" aria-label="Permalink to &quot;Benefits&quot;">​</a></h3><ol><li><strong>Reduced Boilerplate</strong>: Developers no longer need to manually configure adapters</li><li><strong>Consistent Configuration</strong>: Configuration is defined in one place (the step implementation)</li><li><strong>Improved Developer Experience</strong>: Simpler, more intuitive API</li><li><strong>Reduced Errors</strong>: Less manual configuration reduces the chance of errors</li><li><strong>Better Maintainability</strong>: Configuration changes only need to be made in one place</li><li><strong>Architectural Integrity</strong>: Maintains proper separation of concerns between orchestrator and service modules</li></ol><h3 id="module-structure" tabindex="-1">Module Structure <a class="header-anchor" href="#module-structure" aria-label="Permalink to &quot;Module Structure&quot;">​</a></h3><ul><li><code>runtime</code>: Contains the annotations, mapper interfaces, and generic adapter classes</li><li><code>deployment</code>: Contains the Quarkus build processor that scans for annotations and generates adapter beans</li></ul><h3 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h3><p>Developers only need to:</p><ol><li>Annotate their service class with <code>@PipelineStep</code></li><li>Annotate their mapper classes with <code>@MapperForStep</code></li><li>Implement the mapper interfaces (<code>InboundMapper</code>, <code>OutboundMapper</code>)</li><li>Implement the service interface (<code>StepOneToOne</code>, etc.)</li></ol><p>The framework automatically generates and registers the adapter beans at build time.</p>`,20)])])}const g=e(t,[["render",p]]);export{c as __pageData,g as default};
