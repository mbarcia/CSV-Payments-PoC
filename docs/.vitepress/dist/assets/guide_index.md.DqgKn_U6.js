/*
 * Copyright (c) 2023-2025 Mariano Barcia
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import{_ as t,C as n,c as r,o as l,a2 as e,G as o,w as p,a as s,j as h}from"./chunks/framework.BoyqnxIq.js";const f=JSON.parse('{"title":"Introduction","description":"","frontmatter":{},"headers":[],"relativePath":"guide/index.md","filePath":"guide/index.md"}'),d={name:"guide/index.md"};function k(c,i,g,u,m,y){const a=n("Callout");return l(),r("div",null,[i[1]||(i[1]=e(`<h1 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h1><p>The Pipeline Framework is a powerful tool for building reactive pipeline processing systems. It simplifies the development of distributed systems by providing a consistent way to create, configure, and deploy pipeline steps.</p><h2 id="key-features" tabindex="-1">Key Features <a class="header-anchor" href="#key-features" aria-label="Permalink to &quot;Key Features&quot;">​</a></h2><ul><li><strong>Reactive Programming</strong>: Built on top of Mutiny for non-blocking operations</li><li><strong>Annotation-Based Configuration</strong>: Simplifies adapter generation with <code>@PipelineStep</code></li><li><strong>gRPC and REST Support</strong>: Automatically generates adapters for both communication protocols</li><li><strong>Modular Design</strong>: Clear separation between runtime and deployment components</li></ul><h2 id="how-it-works" tabindex="-1">How It Works <a class="header-anchor" href="#how-it-works" aria-label="Permalink to &quot;How It Works&quot;">​</a></h2><p>The framework allows you to define pipeline steps as simple classes annotated with <code>@PipelineStep</code>. The framework automatically generates the necessary adapters at build time, eliminating the need for manual configuration.</p><h1 id="introduction-1" tabindex="-1">Introduction <a class="header-anchor" href="#introduction-1" aria-label="Permalink to &quot;Introduction&quot;">​</a></h1><p>The Pipeline Framework is a powerful tool for building reactive pipeline processing systems. It simplifies the development of distributed systems by providing a consistent way to create, configure, and deploy pipeline steps.</p><h2 id="key-features-1" tabindex="-1">Key Features <a class="header-anchor" href="#key-features-1" aria-label="Permalink to &quot;Key Features&quot;">​</a></h2><ul><li><strong>Reactive Programming</strong>: Built on top of Mutiny for non-blocking operations</li><li><strong>Annotation-Based Configuration</strong>: Simplifies adapter generation with <code>@PipelineStep</code></li><li><strong>gRPC and REST Support</strong>: Automatically generates adapters for both communication protocols</li><li><strong>Modular Design</strong>: Clear separation between runtime and deployment components</li><li><strong>Auto-Generation</strong>: Generates necessary infrastructure at build time</li><li><strong>Observability</strong>: Built-in metrics, tracing, and logging support</li><li><strong>Error Handling</strong>: Comprehensive error handling with DLQ support</li><li><strong>Concurrency Control</strong>: Virtual threads and backpressure management</li></ul><h2 id="how-it-works-1" tabindex="-1">How It Works <a class="header-anchor" href="#how-it-works-1" aria-label="Permalink to &quot;How It Works&quot;">​</a></h2><p>The framework allows you to define pipeline steps as simple classes annotated with <code>@PipelineStep</code>. The framework automatically generates the necessary adapters at build time, eliminating the need for manual configuration.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PipelineStep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   order</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   stub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyGrpc.MyStub.class,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   inboundMapper</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FooRequestToDomainMapper.class,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   outboundMapper</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DomainToBarResponseMapper.class</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPipelineStep</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StepOneToOne</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FooRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BarResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Uni&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BarResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Uni&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FooRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Your implementation here</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Transform the request</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BarResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,13)),o(a,{type:"info",title:"Getting Started"},{default:p(()=>[...i[0]||(i[0]=[s(" New to the Pipeline Framework? Start with our ",-1),h("a",{href:"/guide/getting-started"},"Getting Started",-1),s(" guide to learn the basics. ",-1)])]),_:1}),i[2]||(i[2]=e('<h2 id="guides" tabindex="-1">Guides <a class="header-anchor" href="#guides" aria-label="Permalink to &quot;Guides&quot;">​</a></h2><p>To get started with the Pipeline Framework, explore these guides:</p><h3 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting Started&quot;">​</a></h3><ul><li><a href="/guide/getting-started.html">Getting Started</a>: Setting up the framework in your project</li><li><a href="/guide/creating-steps.html">Creating Pipeline Steps</a>: Building your first pipeline steps</li></ul><h3 id="application-development" tabindex="-1">Application Development <a class="header-anchor" href="#application-development" aria-label="Permalink to &quot;Application Development&quot;">​</a></h3><ul><li><a href="/guide/application-structure.html">Application Structure</a>: Structuring pipeline applications</li><li><a href="/guide/backend-services.html">Backend Services</a>: Creating backend services that implement pipeline steps</li><li><a href="/guide/orchestrator-services.html">Orchestrator Services</a>: Building orchestrator services that coordinate pipelines</li></ul><h3 id="advanced-topics" tabindex="-1">Advanced Topics <a class="header-anchor" href="#advanced-topics" aria-label="Permalink to &quot;Advanced Topics&quot;">​</a></h3><ul><li><a href="/guide/pipeline-compilation.html">Pipeline Compilation</a>: Understanding how the annotation processor works</li><li><a href="/guide/error-handling.html">Error Handling &amp; DLQ</a>: Managing errors and dead letter queues</li><li><a href="/guide/observability.html">Observability</a>: Monitoring and observing pipeline applications</li></ul><h3 id="reference" tabindex="-1">Reference <a class="header-anchor" href="#reference" aria-label="Permalink to &quot;Reference&quot;">​</a></h3><ul><li><a href="/reference/architecture.html">Architecture</a>: Deep dive into the framework architecture</li></ul><p>This approach reduces boilerplate code and ensures consistency across your pipeline steps.</p>',11))])}const b=t(d,[["render",k]]);export{f as __pageData,b as default};
