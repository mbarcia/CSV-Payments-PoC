/*
 * Copyright (c) 2023-2025 Mariano Barcia
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import{_ as n,C as o,c,o as a,a2 as t,b as s,w as r,a as p,G as l,a3 as d}from"./chunks/framework.BoyqnxIq.js";const S=JSON.parse('{"title":"Application Structure","description":"","frontmatter":{},"headers":[],"relativePath":"guide/application-structure.md","filePath":"guide/application-structure.md"}'),u={name:"guide/application-structure.md"};function h(m,e,f,g,b,v){const i=o("Mermaid");return a(),c("div",null,[e[1]||(e[1]=t('<h1 id="application-structure" tabindex="-1">Application Structure <a class="header-anchor" href="#application-structure" aria-label="Permalink to &quot;Application Structure&quot;">​</a></h1><p>This guide explains how to structure applications using the Pipeline Framework, following the patterns demonstrated in the CSV Payments reference implementation. The application structure is broken down into several key components that promote modularity and separation of concerns.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>Applications built with the Pipeline Framework follow a modular architecture with clear separation of concerns. The framework promotes a clean division between:</p><ol><li><strong>Orchestrator Service</strong>: Coordinates the overall pipeline execution</li><li><strong>Backend Services</strong>: Implement individual pipeline steps</li><li><strong>Common Module</strong>: Shared domain objects, DTOs, and mappers</li><li><strong>Framework</strong>: Provides the pipeline infrastructure</li></ol><h2 id="architecture-diagram" tabindex="-1">Architecture Diagram <a class="header-anchor" href="#architecture-diagram" aria-label="Permalink to &quot;Architecture Diagram&quot;">​</a></h2>',6)),(a(),s(d,null,{default:r(()=>[l(i,{id:"mermaid-37",class:"mermaid",graph:"graph%20TB%0A%20%20%20%20subgraph%20%22Pipeline%20Application%22%0A%20%20%20%20%20%20%20%20A%5BCommon%20Module%5D%0A%20%20%20%20%20%20%20%20B%5BOrchestrator%20Service%5D%0A%20%20%20%20%20%20%20%20C%5BStep%201%20Service%5D%0A%20%20%20%20%20%20%20%20D%5BStep%202%20Service%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20A%20--%3E%20B%0A%20%20%20%20A%20--%3E%20C%0A%20%20%20%20A%20--%3E%20D%0A%20%20%20%20B%20--%3E%20C%0A%20%20%20%20C%20--%3E%20D%0A"})]),fallback:r(()=>[...e[0]||(e[0]=[p(" Loading... ",-1)])]),_:1})),e[2]||(e[2]=t('<h2 id="key-components" tabindex="-1">Key Components <a class="header-anchor" href="#key-components" aria-label="Permalink to &quot;Key Components&quot;">​</a></h2><h3 id="common-module" tabindex="-1">Common Module <a class="header-anchor" href="#common-module" aria-label="Permalink to &quot;Common Module&quot;">​</a></h3><p>The shared components module contains code that is used across all services in the pipeline application. This includes domain entities, data transfer objects, and shared mappers.</p><p><a href="./common-module-structure.html">Learn about Common Module Structure</a></p><h3 id="backend-services" tabindex="-1">Backend Services <a class="header-anchor" href="#backend-services" aria-label="Permalink to &quot;Backend Services&quot;">​</a></h3><p>Backend services implement individual pipeline steps with specific processing logic. Each service focuses on a single responsibility and can be independently configured.</p><p><a href="./backend-service-structure.html">Learn about Backend Service Structure</a></p><h3 id="orchestrator-service" tabindex="-1">Orchestrator Service <a class="header-anchor" href="#orchestrator-service" aria-label="Permalink to &quot;Orchestrator Service&quot;">​</a></h3><p>The orchestrator service coordinates the overall pipeline execution, managing the flow of data through the pipeline steps and handling input/output operations.</p><p><a href="./orchestrator-service-structure.html">Learn about Orchestrator Service Structure</a></p><h3 id="dependency-management" tabindex="-1">Dependency Management <a class="header-anchor" href="#dependency-management" aria-label="Permalink to &quot;Dependency Management&quot;">​</a></h3><p>Proper dependency management is crucial for maintaining clean, modular pipeline applications. This includes parent POM configurations and service-specific dependencies.</p><p><a href="./dependency-management.html">Learn about Dependency Management</a></p><h3 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h3><p>Configure pipeline behavior through application properties and environment-specific profiles to support different deployment scenarios.</p><p><a href="./configuration.html">Learn about Configuration</a></p><h3 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best Practices&quot;">​</a></h3><p>Follow industry-standard practices for designing and implementing pipeline applications to ensure maintainability and reliability.</p><p><a href="./best-practices.html">Learn about Best Practices</a></p>',19))])}const k=n(u,[["render",h]]);export{S as __pageData,k as default};
