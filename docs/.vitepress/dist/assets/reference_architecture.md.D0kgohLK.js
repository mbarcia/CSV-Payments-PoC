/*
 * Copyright (c) 2023-2025 Mariano Barcia
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import{_ as s,C as r,c as o,o as a,a2 as t,b as l,w as n,a as p,G as c,a3 as d}from"./chunks/framework.BoyqnxIq.js";const k=JSON.parse('{"title":"Architecture","description":"","frontmatter":{},"headers":[],"relativePath":"reference/architecture.md","filePath":"reference/architecture.md"}'),u={name:"reference/architecture.md"};function h(m,e,g,f,b,P){const i=r("Mermaid");return a(),o("div",null,[e[1]||(e[1]=t('<h1 id="architecture" tabindex="-1">Architecture <a class="header-anchor" href="#architecture" aria-label="Permalink to &quot;Architecture&quot;">​</a></h1><p>The Pipeline Framework is designed as a modular, extensible system for building reactive pipeline processing applications. Understanding its architecture is key to leveraging its full potential.</p><h2 id="core-concepts" tabindex="-1">Core Concepts <a class="header-anchor" href="#core-concepts" aria-label="Permalink to &quot;Core Concepts&quot;">​</a></h2><h3 id="pipeline" tabindex="-1">Pipeline <a class="header-anchor" href="#pipeline" aria-label="Permalink to &quot;Pipeline&quot;">​</a></h3><p>A pipeline is a sequence of processing steps that transform input data into output data. Each step in the pipeline performs a specific transformation or operation on the data flowing through it.</p><h3 id="step" tabindex="-1">Step <a class="header-anchor" href="#step" aria-label="Permalink to &quot;Step&quot;">​</a></h3><p>A step is a single processing unit within a pipeline. Steps can have different patterns:</p><ul><li><strong>One-to-One</strong>: Transforms a single input into a single output</li><li><strong>One-to-Many</strong>: Transforms a single input into multiple outputs</li><li><strong>Many-to-One</strong>: Aggregates multiple inputs into a single output</li><li><strong>Many-to-Many</strong>: Transforms multiple inputs into multiple outputs</li><li><strong>Side Effect</strong>: Performs an operation without changing the data flow</li></ul><h3 id="mapper" tabindex="-1">Mapper <a class="header-anchor" href="#mapper" aria-label="Permalink to &quot;Mapper&quot;">​</a></h3><p>Mappers handle the conversion between different data representations:</p><ul><li><strong>gRPC objects</strong>: Protocol buffer generated classes</li><li><strong>Domain objects</strong>: Business logic entities</li><li><strong>DTO objects</strong>: Data transfer objects</li></ul><h3 id="adapter" tabindex="-1">Adapter <a class="header-anchor" href="#adapter" aria-label="Permalink to &quot;Adapter&quot;">​</a></h3><p>Adapters bridge the gap between the pipeline framework and external systems, handling protocol-specific details like gRPC or REST communication.</p><h2 id="system-components" tabindex="-1">System Components <a class="header-anchor" href="#system-components" aria-label="Permalink to &quot;System Components&quot;">​</a></h2><h3 id="runtime-module" tabindex="-1">Runtime Module <a class="header-anchor" href="#runtime-module" aria-label="Permalink to &quot;Runtime Module&quot;">​</a></h3><p>The runtime module contains the core framework components:</p><ul><li><strong>Annotations</strong>: <code>@PipelineStep</code>, <code>@MapperForStep</code> for declarative configuration</li><li><strong>Interfaces</strong>: Step interfaces (<code>StepOneToOne</code>, <code>StepOneToMany</code>, etc.)</li><li><strong>Base Classes</strong>: Abstract implementations and utilities</li><li><strong>Configuration</strong>: <code>StepConfig</code>, <code>PipelineConfig</code> for runtime behavior</li><li><strong>Mappers</strong>: <code>Mapper</code> interface and implementations</li><li><strong>Persistence</strong>: <code>PersistenceManager</code> for entity persistence</li></ul><h3 id="deployment-module" tabindex="-1">Deployment Module <a class="header-anchor" href="#deployment-module" aria-label="Permalink to &quot;Deployment Module&quot;">​</a></h3><p>The deployment module contains build-time processors:</p><ul><li><strong>Annotation Processor</strong>: Scans for <code>@PipelineStep</code> and <code>@MapperForStep</code> annotations</li><li><strong>Code Generation</strong>: Automatically generates gRPC and REST adapters</li><li><strong>Dependency Injection</strong>: Registers generated beans with the DI container</li></ul><h2 id="data-flow-patterns" tabindex="-1">Data Flow Patterns <a class="header-anchor" href="#data-flow-patterns" aria-label="Permalink to &quot;Data Flow Patterns&quot;">​</a></h2><h3 id="reactive-streams" tabindex="-1">Reactive Streams <a class="header-anchor" href="#reactive-streams" aria-label="Permalink to &quot;Reactive Streams&quot;">​</a></h3><p>The framework is built on Mutiny reactive streams, supporting both <code>Uni</code> (single item) and <code>Multi</code> (multiple items) patterns.</p>',23)),(a(),l(d,null,{default:n(()=>[c(i,{id:"mermaid-150",class:"mermaid",graph:"graph%20LR%0A%20%20%20%20A%5BInput%20Uni%2FMulti%5D%20--%3E%20B%5BStep%201%5D%0A%20%20%20%20B%20--%3E%20C%5BStep%202%5D%0A%20%20%20%20C%20--%3E%20D%5BStep%203%5D%0A%20%20%20%20D%20--%3E%20E%5BOutput%20Uni%2FMulti%5D%0A"})]),fallback:n(()=>[...e[0]||(e[0]=[p(" Loading... ",-1)])]),_:1})),e[2]||(e[2]=t(`<h3 id="error-handling" tabindex="-1">Error Handling <a class="header-anchor" href="#error-handling" aria-label="Permalink to &quot;Error Handling&quot;">​</a></h3><p>Each step includes built-in error handling with configurable retry policies, circuit breakers, and dead letter queues.</p><h3 id="concurrency" tabindex="-1">Concurrency <a class="header-anchor" href="#concurrency" aria-label="Permalink to &quot;Concurrency&quot;">​</a></h3><p>Steps can be configured to run with different concurrency models, including virtual threads for high-throughput scenarios.</p><h2 id="module-structure" tabindex="-1">Module Structure <a class="header-anchor" href="#module-structure" aria-label="Permalink to &quot;Module Structure&quot;">​</a></h2><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pipeline-framework/</span></span>
<span class="line"><span>├── runtime/                 # Core framework components</span></span>
<span class="line"><span>│   ├── src/main/java/</span></span>
<span class="line"><span>│   │   └── io/github/mbarcia/pipeline/</span></span>
<span class="line"><span>│   │       ├── annotation/    # Framework annotations</span></span>
<span class="line"><span>│   │       ├── config/         # Configuration classes</span></span>
<span class="line"><span>│   │       ├── mapper/        # Mapper interfaces</span></span>
<span class="line"><span>│   │       ├── persistence/   # Persistence utilities</span></span>
<span class="line"><span>│   │       ├── service/       # Service interfaces</span></span>
<span class="line"><span>│   │       ├── step/          # Step interfaces and base classes</span></span>
<span class="line"><span>│   │       └── GenericGrpcReactiveServiceAdapter.java</span></span>
<span class="line"><span>│   └── pom.xml</span></span>
<span class="line"><span>├── deployment/              # Build-time processors</span></span>
<span class="line"><span>│   ├── src/main/java/</span></span>
<span class="line"><span>│   │   └── io/github/mbarcia/pipeline/processor/</span></span>
<span class="line"><span>│   │       └── PipelineProcessor.java</span></span>
<span class="line"><span>│   └── pom.xml</span></span>
<span class="line"><span>└── pom.xml</span></span></code></pre></div><h2 id="integration-patterns" tabindex="-1">Integration Patterns <a class="header-anchor" href="#integration-patterns" aria-label="Permalink to &quot;Integration Patterns&quot;">​</a></h2><h3 id="grpc-integration" tabindex="-1">gRPC Integration <a class="header-anchor" href="#grpc-integration" aria-label="Permalink to &quot;gRPC Integration&quot;">​</a></h3><p>The framework automatically generates gRPC adapters for pipeline steps, enabling seamless integration with gRPC-based services.</p><h3 id="rest-integration" tabindex="-1">REST Integration <a class="header-anchor" href="#rest-integration" aria-label="Permalink to &quot;REST Integration&quot;">​</a></h3><p>REST adapters can be generated to expose pipeline steps as HTTP endpoints.</p><h3 id="database-integration" tabindex="-1">Database Integration <a class="header-anchor" href="#database-integration" aria-label="Permalink to &quot;Database Integration&quot;">​</a></h3><p>Built-in persistence support allows steps to automatically persist entities before processing.</p><h2 id="configuration-model" tabindex="-1">Configuration Model <a class="header-anchor" href="#configuration-model" aria-label="Permalink to &quot;Configuration Model&quot;">​</a></h2><h3 id="step-level-configuration" tabindex="-1">Step-Level Configuration <a class="header-anchor" href="#step-level-configuration" aria-label="Permalink to &quot;Step-Level Configuration&quot;">​</a></h3><p>Each step can be independently configured with:</p><ul><li>Retry policies (limit, wait time, backoff)</li><li>Concurrency settings</li><li>Debugging options</li><li>Persistence behavior</li><li>Error recovery strategies</li></ul><h3 id="pipeline-level-configuration" tabindex="-1">Pipeline-Level Configuration <a class="header-anchor" href="#pipeline-level-configuration" aria-label="Permalink to &quot;Pipeline-Level Configuration&quot;">​</a></h3><p>Global pipeline settings control:</p><ul><li>Default step configurations</li><li>Environment-specific profiles</li><li>Monitoring and observability</li><li>Resource allocation</li></ul><h2 id="extension-points" tabindex="-1">Extension Points <a class="header-anchor" href="#extension-points" aria-label="Permalink to &quot;Extension Points&quot;">​</a></h2><h3 id="custom-steps" tabindex="-1">Custom Steps <a class="header-anchor" href="#custom-steps" aria-label="Permalink to &quot;Custom Steps&quot;">​</a></h3><p>Developers can create custom step implementations by extending the provided interfaces.</p><h3 id="custom-mappers" tabindex="-1">Custom Mappers <a class="header-anchor" href="#custom-mappers" aria-label="Permalink to &quot;Custom Mappers&quot;">​</a></h3><p>Mapper interfaces can be implemented to handle specific conversion requirements.</p><h3 id="custom-adapters" tabindex="-1">Custom Adapters <a class="header-anchor" href="#custom-adapters" aria-label="Permalink to &quot;Custom Adapters&quot;">​</a></h3><p>Additional adapters can be created for new protocols or integration patterns.</p><h2 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best Practices&quot;">​</a></h2><h3 id="step-design" tabindex="-1">Step Design <a class="header-anchor" href="#step-design" aria-label="Permalink to &quot;Step Design&quot;">​</a></h3><ul><li>Keep steps focused on a single responsibility</li><li>Design steps to be stateless when possible</li><li>Handle errors gracefully with appropriate recovery mechanisms</li></ul><h3 id="performance-optimization" tabindex="-1">Performance Optimization <a class="header-anchor" href="#performance-optimization" aria-label="Permalink to &quot;Performance Optimization&quot;">​</a></h3><ul><li>Use virtual threads for I/O-bound operations</li><li>Configure appropriate concurrency levels</li><li>Implement efficient mapper implementations</li></ul><h3 id="testing" tabindex="-1">Testing <a class="header-anchor" href="#testing" aria-label="Permalink to &quot;Testing&quot;">​</a></h3><ul><li>Test steps in isolation</li><li>Use the framework&#39;s testing utilities</li><li>Validate mapper correctness</li><li>Simulate various error conditions</li></ul>`,34))])}const v=s(u,[["render",h]]);export{k as __pageData,v as default};
