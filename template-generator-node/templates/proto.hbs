syntax = "proto3";

option java_package = "{{basePackage}}.grpc";

{{#unless isFirstStep}}
import "{{previousStepName}}.proto";
{{/unless}}

{{#if isFirstStep}}
message {{inputTypeName}} {
{{#each inputFields}}
{{#if (isListType this.type)}}
  repeated {{listInnerType this.type}} {{this.name}} = {{this.fieldNumber}};
{{else}}
{{#if (isMapType this.type)}}
  map<{{mapKeyType this.type}}, {{mapValueType this.type}}> {{this.name}} = {{this.fieldNumber}};
{{else}}
  {{this.protoType}} {{this.name}} = {{this.fieldNumber}};
{{/if}}
{{/if}}
{{/each}}
}
{{/if}}

message {{outputTypeName}} {
{{#each outputFields}}
{{#if (isListType this.type)}}
  repeated {{listInnerType this.type}} {{this.name}} = {{this.fieldNumber}};
{{else}}
{{#if (isMapType this.type)}}
  map<{{mapKeyType this.type}}, {{mapValueType this.type}}> {{this.name}} = {{this.fieldNumber}};
{{else}}
  {{this.protoType}} {{this.name}} = {{this.fieldNumber}};
{{/if}}
{{/if}}
{{/each}}
}

service Process{{serviceNameFormatted}}Service {
{{#if (isExpansion cardinality)}}
  rpc remoteProcess({{#if isFirstStep}}{{inputTypeName}}{{else}}{{previousStepOutputTypeName}}{{/if}}) returns (stream {{outputTypeName}});
{{/if}}
{{#if (isReduction cardinality)}}
  rpc remoteProcess(stream {{#if isFirstStep}}{{inputTypeName}}{{/if}}{{#unless isFirstStep}}{{previousStepOutputTypeName}}{{/unless}}) returns ({{outputTypeName}});
{{/if}}
{{#unless (isExpansion cardinality)}}
{{#unless (isReduction cardinality)}}
  rpc remoteProcess({{#if isFirstStep}}{{inputTypeName}}{{else}}{{previousStepOutputTypeName}}{{/if}}) returns ({{outputTypeName}});
{{/unless}}
{{/unless}}
}