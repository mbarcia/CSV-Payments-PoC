package {{basePackage}}.common.dto;

import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import java.util.UUID;
import lombok.*;

{{#if hasDateFields}}
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.OffsetDateTime;
import java.time.ZonedDateTime;
import java.time.Instant;
import java.time.Duration;
import java.time.Period;
{{/if}}
{{#if hasBigIntegerFields}}
import java.math.BigInteger;
{{/if}}
{{#if hasBigDecimalFields}}
import java.math.BigDecimal;
{{/if}}
{{#if hasCurrencyFields}}
import java.util.Currency;
{{/if}}
{{#if hasPathFields}}
import java.nio.file.Path;
{{/if}}
{{#if hasNetFields}}
import java.net.URI;
import java.net.URL;
{{/if}}
{{#if hasIoFields}}
import java.io.File;
{{/if}}
{{#if hasAtomicFields}}
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
{{/if}}
{{#if hasUtilFields}}
import java.util.List;
{{/if}}
{{#if hasMapFields}}
import java.util.Map;
{{/if}}

@Value
@Builder
@JsonDeserialize(builder = {{className}}.{{className}}Builder.class)
public class {{className}} {
{{#unless hasIdField}}  public UUID id;
{{/unless}}
{{#each fields}}
  public {{{this.type}}} {{this.name}};
{{/each}}

  // Lombok will generate the builder, but Jackson needs to know how to interpret it
  @JsonPOJOBuilder(withPrefix = "")
  public static class {{className}}Builder {}
}